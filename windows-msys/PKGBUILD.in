# Copyright (C) 2020-2024 Alexandros Theodotou <alex at zrythm dot org>
#
# This file is part of Zrythm
#
# Zrythm is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Zrythm is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Zrythm.  If not, see <https://www.gnu.org/licenses/>.
#
# Maintainer: Alexandros Theodotou <alex at zrythm dot org>
_realname=zrythm@DASH_TRIAL@
_zplugins_ver=@ZPLUGINS_VER@
_zrythm_builddir="build-zrythm-${MINGW_CHOST}"
_zplugins_builddir="build-zplugins-${MINGW_CHOST}"
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=@ZRYTHM_PKG_VERSION@
pkgrel=2
arch=('any')
pkgdesc='a highly automated and intuitive digital audio workstation (mingw-w64)'
depends=("${MINGW_PACKAGE_PREFIX}-gtk4"
         "${MINGW_PACKAGE_PREFIX}-boost"
         "${MINGW_PACKAGE_PREFIX}-angleproject"
         "${MINGW_PACKAGE_PREFIX}-libadwaita"
         "${MINGW_PACKAGE_PREFIX}-libpanel"
         "${MINGW_PACKAGE_PREFIX}-cantarell-fonts"
         "${MINGW_PACKAGE_PREFIX}-curl-winssl"
         "${MINGW_PACKAGE_PREFIX}-rubberband"
         "${MINGW_PACKAGE_PREFIX}-fmt"
         "${MINGW_PACKAGE_PREFIX}-libsndfile"
         "${MINGW_PACKAGE_PREFIX}-libsamplerate"
         "${MINGW_PACKAGE_PREFIX}-lilv"
         "${MINGW_PACKAGE_PREFIX}-lsp-dsp-lib"
         "${MINGW_PACKAGE_PREFIX}-jack2"
         "${MINGW_PACKAGE_PREFIX}-gtksourceview5"
         "${MINGW_PACKAGE_PREFIX}-gtkmm-4.0"
         "${MINGW_PACKAGE_PREFIX}-graphviz"
         "${MINGW_PACKAGE_PREFIX}-dlfcn"
         "${MINGW_PACKAGE_PREFIX}-fftw"
         "${MINGW_PACKAGE_PREFIX}-gtest"
         "${MINGW_PACKAGE_PREFIX}-pango"
         "${MINGW_PACKAGE_PREFIX}-pcre2"
         "${MINGW_PACKAGE_PREFIX}-shaderc"
         "${MINGW_PACKAGE_PREFIX}-zstd"
         "${MINGW_PACKAGE_PREFIX}-libyaml"
         "${MINGW_PACKAGE_PREFIX}-rtaudio"
         "${MINGW_PACKAGE_PREFIX}-rtmidi"
         "${MINGW_PACKAGE_PREFIX}-spdlog"
         "${MINGW_PACKAGE_PREFIX}-vamp-plugin-sdk"
         "${MINGW_PACKAGE_PREFIX}-xxhash")
makedepends=("${MINGW_PACKAGE_PREFIX}-ccache"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-gettext"
             "${MINGW_PACKAGE_PREFIX}-gettext-tools"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "guile"
             "${MINGW_PACKAGE_PREFIX}-iconv"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3")
options=('!strip' '!staticlibs')
license=("AGPL3")
url="https://www.zrythm.org"
#install=${_realname}-${CARCH}.install
source=("zrythm-$pkgver.tar.gz" "zplugins-$_zplugins_ver.tar.gz")
sha256sums=('SKIP' 'SKIP')

prepare() {
  pushd "${srcdir}"/zrythm-${pkgver}
  sed -i -e "s|\['benchmarks/dsp', true\]|#|g" tests/meson.build
  popd
}

build() {
  [[ -d "$_zrythm_builddir" ]] && rm -rf "$_zrythm_builddir"
  [[ -d "$_zplugins_builddir" ]] && rm -rf "$_zplugins_builddir"

  # build zrythm
  mkdir -p $_zrythm_builddir
  pushd $_zrythm_builddir

  # replace non-ASCII characters in TRANSLATORS
  iconv -c -f utf-8 -t ascii//TRANSLIT ${srcdir}/zrythm-${pkgver}/TRANSLATORS > TRANSLATORS2 || true
  rm ${srcdir}/zrythm-${pkgver}/TRANSLATORS
  mv TRANSLATORS2 ${srcdir}/zrythm-${pkgver}/TRANSLATORS
  sed -i -e 's|"|'\''|g' ${srcdir}/zrythm-${pkgver}/TRANSLATORS

  echo "using prefix ${MINGW_PREFIX}"
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;-DCMAKE_BUILD_TYPE=" \
  ${MINGW_PREFIX}/bin/cmake -B . \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_C_FLAGS="@MARCH_MTUNE@" -DCMAKE_CXX_FLAGS="@MARCH_MTUNE@" \
    -DZRYTHM_WITH_RTAUDIO=ON \
    -DZRYTHM_WITH_RTMIDI=ON \
    -DZRYTHM_WITH_JACK=ON \
    -DZRYTHM_PACKAGE_VERSION=@ZRYTHM_PKG_SEMVER_VERSION@ \
    -DZRYTHM_CHECK_UPDATES=ON \
    -DZRYTHM_MANPAGE=OFF \
    -DZRYTHM_MAINTAINER_MODE=ON \
    -DZRYTHM_IS_TRIAL_VER=@TRIAL_TRUE_FALSE@ \
    -DZRYTHM_IS_INSTALLER_VER=ON \
    -DZRYTHM_CARLA_BINARIES_32_BIT_DIR='/mingw32/lib/carla' \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DZRYTHM_TESTS=OFF \
    -DZRYTHM_CARLA_WITH_CV32_PATCHBAY_VARIANT=ON \
    -DZRYTHM_FFTW3_THREADS_SEPARATE=ON \
    -S "../zrythm-${pkgver}"

  ${MINGW_PREFIX}/bin/ninja -d explain -v
  cp ${MINGW_PREFIX}/lib/carla/libcarla_host-plugin.dll ./src/
  popd

  # build zplugins
  echo "building zplugins..."
  mkdir -p "$_zplugins_builddir"
  pushd "$_zplugins_builddir"
  ls -l
  ls -l ..
  mv ../zplugins-v${_zplugins_ver} ../zplugins-${_zplugins_ver}
  MSYS2_ARG_CONV_EXCL="--prefix=" \
  ${MINGW_PREFIX}/bin/meson \
    --prefix=${MINGW_PREFIX} \
    -Dplugins=Chordz,Chorus,EQ,LFO,LimiterSP,PhaserSP,PitchSP,Saturator,Saw \
    -Dc_args='-Wno-error=incompatible-pointer-types' \
    --buildtype=release \
    "../zplugins-${_zplugins_ver}"
  ${MINGW_PREFIX}/bin/meson compile -j1
  popd
}

check() {
  set -x
  pushd $_zrythm_builddir
  echo "running tests"
  # TODO
  #ninja test || cat meson-logs/testlog.txt
  echo "running --version"
  src/zrythm.exe --version > test.txt 2>&1 || cat test.txt
  src/zrythm.exe --version
  popd

  pushd "$_zplugins_builddir"
  ninja test
  popd
  set +x
}

package() {
  pushd "$_zrythm_builddir"
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .
  install -Dm644 "${srcdir}/zrythm-${pkgver}/LICENSES/LicenseRef-ZrythmLicense.txt" "${pkgdir}${MINGW_PREFIX}/share/licenses/zrythm/COPYING"
  popd

  pushd "$_zplugins_builddir"
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/meson install \
    --skip-subprojects
  popd

  # reclaim space
  rm -rf "$_zrythm_builddir"
  rm -rf "$_zplugins_builddir"
}
