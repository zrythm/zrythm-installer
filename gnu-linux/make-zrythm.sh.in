#! /bin/bash
#
# Copyright (C) 2022-2023 Alexandros Theodotou <alex at zrythm dot org>
#
# This file is part of Zrythm
#
# Zrythm is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Zrythm is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Zrythm.  If not, see <https://www.gnu.org/licenses/>.

set -ex

out_file=$1
private_dir=$2
zrythm_src_tarball=$3
prefix="$4"
meson_bin="$5"
zplugins_tarball="$6"
demo_project_zip="$7"

zip_filename=`basename $out_file`
zip_inner_dir_name="${zip_filename%.*}"
zip_inner_dir="$private_dir/$zip_inner_dir_name"
zrythm_version="@ZRYTHM_PKG_VERSION@"
dash_trial="@DASH_TRIAL@"
deps_prefix="@DEPS_PREFIX@"
zplugins_ver="@ZPLUGINS_VER@"

meson_build_dir="`pwd`"

rm -rf "$out_file"
rm -rf "$private_dir"

mkdir -p "$out_file"
mkdir -p "$private_dir"
tar xf "$zrythm_src_tarball" --directory "$private_dir"
tar xf "$zplugins_tarball" --directory "$private_dir"
mv "$private_dir/zplugins-v$zplugins_ver" "$private_dir/zplugins-$zplugins_ver"

export PKG_CONFIG_PATH="$deps_prefix/lib/x86_64-linux-gnu/pkgconfig:$deps_prefix/lib/pkgconfig:$deps_prefix/share/pkgconfig"
export PATH="$deps_prefix/bin:$PATH"
export LIBRARY_PATH="$deps_prefix/lib64:$deps_prefix/lib/x86_64-linux-gnu:$deps_prefix/lib"
export CPATH="$deps_prefix/include"
#export LDFLAGS="$(pkg-config --libs gmp libffi libcrypt) -lunistring"
export LD_LIBRARY_PATH="$LIBRARY_PATH"
export CC="$deps_prefix"/bin/gcc
export CXX="$deps_prefix"/bin/g++

# make zplugins
if [[ "@TRIAL_TRUE_FALSE@" == "false" ]]; then
  pushd "$private_dir/zplugins-$zplugins_ver"
  "$meson_bin" build --buildtype=debugoptimized -Dprefix="$prefix" \
    -Dlv2dir="lib/x86_64-linux-gnu/zrythm/lv2" \
    -Dplugins=Chordz,Chorus,EQ,LFO,LimiterSP,PhaserSP,PitchSP,Saturator,Saw \
    -Dlv2_core_path="$prefix/lib/lv2"
  ninja -C build -v
  "$meson_bin" install -C build --destdir="$meson_build_dir/$out_file"
  popd
fi

# make zrythm
pushd "$private_dir/zrythm-$zrythm_version"
fallback_subprojects_csv=lilv,sord,serd,sratom,zix,libcyaml
fallback_subprojects="`echo $fallback_subprojects_csv | tr , ' '`"
$meson_bin subprojects download $fallback_subprojects
$meson_bin build \
  -Dprefix="$prefix" \
  -Db_lto=true \
  -Dnative_build=false \
  -Dc_args="@MARCH_MTUNE@" -Dcpp_args="@MARCH_MTUNE@" \
  -Ddebug=true \
  -Dextra_debug_info=true \
  -Doptimization=2 \
  -Dcarla=enabled \
  -Dopus=true \
  -Dforce_fallback_for="$fallback_subprojects_csv" \
  -Dwrap_mode=default \
  -Dtrial_ver=@TRIAL_TRUE_FALSE@ \
  -Dmanpage=true \
  -Dgraphviz=disabled \
  -Dvamp_static=true \
  -Drtaudio=enabled -Drtmidi=enabled -Dlsp_dsp=enabled \
  -Djack=enabled -Dalsa=enabled \
  -Dpulse=enabled \
  -Dfftw3_threads_separate=false \
  -Dstatic_lsp_dsp=true -Dfallback_version=@ZRYTHM_PKG_SEMVER_VERSION@ \
  -Dcheck_updates=true -Dcompletions=false \
  -Dcarla_use_cv32_patchbay_variant=true \
  -Dinstaller_ver=true \
  -Dtests=false
ninja -C build -v
"$meson_bin" install -C build --destdir="$meson_build_dir/$out_file"
popd

# --- copy rest of needed items ---

destdir_w_prefix="$meson_build_dir/$out_file/$prefix"
zrythm_bin="$destdir_w_prefix/bin/zrythm"

# copy dependent libs
for f in `ldd "$zrythm_bin" | awk '{print $3}' | grep "$deps_prefix"` ; do
  f_basename=`basename "$f"`
  cp -L "$f" "$destdir_w_prefix/lib/x86_64-linux-gnu/$f_basename"
done
#cp -L /lib/x86_64-linux-gnu/libcrypt.so.1 "$destdir_w_prefix/lib/x86_64-linux-gnu/libcrypt.so.1"
#rm /opt/zrythm/lib/x86_64-linux-gnu/libstdc++.so* || true

# these are needed on fedora 34 + x11
#cp -L /lib/x86_64-linux-gnu/libwrap.so.0 "$destdir_w_prefix/lib/x86_64-linux-gnu/libwrap.so.0"
#cp -L /lib/x86_64-linux-gnu/libapparmor.so.1 "$destdir_w_prefix/lib/x86_64-linux-gnu/libapparmor.so.1"
#cp -L /lib/x86_64-linux-gnu/libnsl.so.1 "$destdir_w_prefix/lib/x86_64-linux-gnu/libnsl.so.1"

# copy carla libs
carla_lib_path="$destdir_w_prefix/lib/x86_64-linux-gnu/zrythm/carla"
mkdir -p "$carla_lib_path"
cp -R $deps_prefix/lib/carla/* "$carla_lib_path/"
patchelf --remove-rpath "$zrythm_bin"
patchelf --replace-needed $deps_prefix/lib/carla/libcarla_host-plugin.so libcarla_host-plugin.so "$zrythm_bin"

# copy pixbuf loaders
cp -r $deps_prefix/lib/x86_64-linux-gnu/gdk-pixbuf-2.0 "$destdir_w_prefix/lib/x86_64-linux-gnu/"
cp -L $deps_prefix/lib/librsvg-2.so.2 "$destdir_w_prefix/lib/x86_64-linux-gnu/"
sed -i "s|$deps_prefix/|${prefix}/|g" "$destdir_w_prefix/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders.cache"

# copy required binaries
mkdir -p "$destdir_w_prefix/libexec"
cp "$deps_prefix/libexec/gio-launch-desktop" "$destdir_w_prefix/libexec/gio-launch-desktop"

mkdir -p "$destdir_w_prefix/share/icons"

# copy breeze-dark
#cp -r "$breeze_dark_path" "$destdir_w_prefix/share/icons/breeze-dark"

# copy other icons
mkdir -p "$destdir_w_prefix/share/icons/hicolor/scalable/actions"
cp "$deps_prefix/share/icons/hicolor/scalable/actions/"* "$destdir_w_prefix/share/icons/hicolor/scalable/actions/"

# copy thumbnailers
cp -r "$deps_prefix/share/thumbnailers" "$destdir_w_prefix/share/thumbnailers"

# copy gtk4 stuff
cp -r "$deps_prefix/share/gtk-4.0" "$destdir_w_prefix/share/gtk-4.0"

# copy gtksourceview stuff
cp -r "$deps_prefix/share/gtksourceview-5" "$destdir_w_prefix/share/gtksourceview-5"

# copy missing LC messages
rsync -zrahvWt --remove-source-files "$deps_prefix/share/locale/" "$destdir_w_prefix/share/locale"

# copy and compile glib schemas
cp "$deps_prefix/share/glib-2.0/schemas/"* "$destdir_w_prefix/share/glib-2.0/schemas/"
glib-compile-schemas "$destdir_w_prefix/share/glib-2.0/schemas"

# copy demo project(s)
mkdir -p "$destdir_w_prefix/share/zrythm/templates"
unzip "$demo_project_zip" -d "$destdir_w_prefix/share/zrythm/templates"

# cleanup
pushd "$destdir_w_prefix"
rm -rf include
rm -rf bin/zstd* bin/lv2* bin/s*rd* bin/unzstd bin/gtk4*
rm -rf lib/libreproc.a lib/python3
rm -rf lib/x86_64-linux-gnu/zrythm/carla/libcarla_standalone2.so

# https://github.com/AppImageCommunity/pkg2appimage/blob/master/excludelist
rm -rf lib/x86_64-linux-gnu/libfontconfig.so.1
rm -rf lib/x86_64-linux-gnu/libexpat.so.1
rm -rf lib/x86_64-linux-gnu/libp11-kit.so.0
rm -rf lib/x86_64-linux-gnu/libz.so.1
rm -rf lib/x86_64-linux-gnu/libfribidi.so.0
rm -rf lib/x86_64-linux-gnu/libgmp.so.10

# remove these too (verify that it still works)
rm -rf lib/x86_64-linux-gnu/libXrender.so.1
rm -rf lib/x86_64-linux-gnu/libfreetype.so.6
popd
